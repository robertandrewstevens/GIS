# Precondition:  the variables a and b contain the number of
# cars in each location at the beginning of the week.
# Postcondition:  a and b have been modified to reflect the
# number of cars that moved.
aRate <- 0.05 # Rate of cars in Albany dropped off in Boston
bRate <- 0.03 # Rate of cars in Boston dropped off in Albany
atob <- round(aRate*a - bRate*b) # cars moved from A to B
print(a <- a - atob) # Number of cars remaining in Albany
print(b <- b + atob) # Number of cars remaining in Boston
points(i, a, col = "red", pch = 1)
points(i, b, col = "blue", pch = 18)
}
print(a <- 150) # initial number of cars in Albany
print(b <- 150) # initial number of cars in Boston
plot(c(0, 52), c(0, 200),
xlab = "Week", ylab = "Count", type = "n")
for(i in 1:52) {
#source("car_update.R")
# Updates the number of cars in each location from one week to
# the next.
# Precondition:  the variables a and b contain the number of
# cars in each location at the beginning of the week.
# Postcondition:  a and b have been modified to reflect the
# number of cars that moved.
aRate <- 0.05 # Rate of cars in Albany dropped off in Boston
bRate <- 0.03 # Rate of cars in Boston dropped off in Albany
atob <- round(aRate*a - bRate*b) # cars moved from A to B
print(a <- a - atob) # Number of cars remaining in Albany
print(b <- b + atob) # Number of cars remaining in Boston
points(i, a, col = "red", pch = 1)
points(i, b, col = "blue", pch = 18)
}
a1 <- 1
r <- 1/2
for(i in 2:10) {
print(a <- a1*r^(i - 1))
}
A1 <- 1
total <- 0
for(i in 1:10) {
a <- A1 * 0.5^(i - 1)
total <- total + a
}
(ans <- total)
A1 <- 1
total <- 0
for(i in 1:10) {
a <- A1 * 0.5^(i - 1)
total <- total + a
}
total
a <- 1
r <- 1/2
for(i in 2:10) {
print(a <- a*r)
}
n <- 10
A1 <- 1
total <- 0
for(i in 1:n) {
a <- A1 * 0.5^(i - 1)
total <- total + a
}
total
options(digits = 14) # instead of "format long" in MATLAB
series <- function(n) {
A1 <- 1
total <- 0
for(i in 1:n) {
a <- A1*0.5^(i - 1)
total <- total + a
}
print(total)
}
n <- 10; series(n)
n <- 20; series(n)
n <- 30; series(n)
n <- 40; series(n)
n <- 10
#source("fibonacci2.R")
# Computes the nth Fibonacci number.
# Precondition: you must assign a value to n before running this
# script.  Assume that n is greater than 2.
# Postcondition: assign the 10th element to ans.
prev1 <- 1
prev2 <- 1
total <- 0
for(i in 3:n) {
print(total <-  prev1 + prev2)
prev2 <- prev1
prev1 <- total
}
total
plot(c(0, 20), c(0, 7000), type = "n",
xlab = "n", ylab = "Fibonacci Number")
points(1, 1, col = "red", pch = 1) # n = 1, F1 = 1
points(2, 1, col = "red", pch = 1) # n = 2, F2 = 1
for(n in 3:20) {
#source("fibonacci2.R")
prev1 <- 1
prev2 <- 1
total <- 0
for(i in 3:n) {
#print(total <-  prev1 + prev2)
total <-  prev1 + prev2
prev2 <- prev1
prev1 <- total
}
points(i, total, col = "red", pch = 1)
}
r <- 3.9
#source("logmap.R")
n <- 50
X <- as.numeric(rep(NA, n)) # initialize
X[1] = 0.5
for(j in 2:n) {
X[j] <- r*X[j - 1]*(1 - X[j - 1])
}
plot(X)
rVec <- seq(2.4, 4.0, len = 100)
yVec <- as.numeric(rep(0, length(rVec)))
for(i in 1:length(rVec)) {
r <- rVec[i]
#source("logmap.R")
n <- 50
X <- as.numeric(rep(NA, n)) # initialize
X[1] = 0.5
for(j in 2:n) {
X[j] <- r*X[j - 1]*(1 - X[j - 1])
}
yVec[i] <- X[n]
}
plot(rVec, yVec, pch = 16, col = "red")
x <- 4
(x <- sqrt(2*x + 3))
(x <- sqrt(2*x + 3))
(x <- sqrt(2*x + 3))
(x <- sqrt(2*x + 3))
(x <- sqrt(2*x + 3))
label
x <- c(1,  5)
y <- c(5, -1)
labels <- c("x1, f(x1)", "x2, f(x2)")
plot(x , y, type = "p", xaxis = "n", yaxis = "n")
plot(x , y, type = "p", xaxis = "n", yaxis = "n")
text(x, y, labels)
x <- c(1,  5)
y <- c(5, -1)
xyLabels <- c("x1, f(x1)", "x2, f(x2)")
plot(x , y, type = "p", xaxis = "n", yaxis = "n")
text(x, y, xyLabels, pos = 4)
x <- c(1,  5)
y <- c(5, -1)
xyLabels <- c("x1, f(x1)", "x2, f(x2)")
plot(x , y, type = "p", xaxis = "n", yaxis = "n",
xlab = "", ylab = "")
text(x, y, xyLabels, pos = 4)
x <- c(1,  5)
y <- c(5, -1)
xyLabels <- c("x1, f(x1)", "x2, f(x2)")
plot(x , y, type = "p",
xlab = "", ylab = "", xaxt = "n")
abline(h = 0)
text(x, y, xyLabels, pos = 4)
x <- c(1,  5)
y <- c(5, -1)
xyLabels <- c("x1, f(x1)", "x2, f(x2)")
plot(x , y, type = "p",
xlab = "", ylab = "", xaxt = "n")
abline(h = 0)
text(x, y, xyLabels, pos = 4)
x <- c(1,  5)
y <- c(5, -1)
xyLabels <- c("x1, f(x1)", "x2, f(x2)")
plot(x , y, type = "p",
xlab = "", ylab = "", xaxt = "n", yaxt = "n")
abline(h = 0)
text(x, y, xyLabels, pos = 4)
x <- c(1,  5)
y <- c(5, -1)
xyLabels <- c("x1, f(x1)", "x2, f(x2)")
plot(x , y, type = "p",
xlab = "", ylab = "",
xaxt = "n", yaxt = "n",
xlim = c(0, 6), ylim = c(-2, 6))
abline(h = 0)
text(x, y, xyLabels, pos = 4)
x <- c(1,  5)
y <- c(5, -1)
xyLabels <- c("x1, f(x1)", "x2, f(x2)")
plot(x , y, type = "p",
xlab = "", ylab = "",
xaxt = "n", yaxt = "n",
xlim = c(0, 6), ylim = c(-2, 6))
abline(h = 0)
abline(v = 0)
text(x, y, xyLabels, pos = 4)
x <- c(1,  5)
y <- c(5, -1)
xyLabels <- c("x1, f(x1)", "x2, f(x2)")
plot(x , y, type = "p", frame.plot=F,
xlab = "", ylab = "",
xaxt = "n", yaxt = "n",
xlim = c(0, 6), ylim = c(-2, 6))
abline(h = 0)
abline(v = 0)
text(x, y, xyLabels, pos = 4)
x <- c(1,  5)
y <- c(5, -1)
xyLabels <- c("x1, f(x1)", "x2, f(x2)")
plot(x , y, type = "p", frame.plot=F,
xlab = "", ylab = "",
xaxt = "n", yaxt = "n",
xlim = c(0, 6), ylim = c(-1, 7))
abline(h = 0)
abline(v = 0)
text(x, y, xyLabels, pos = 4)
x <- c(1,  5)
y <- c(5, -1)
xyLabels <- c("x1, f(x1)", "x2, f(x2)")
plot(x , y, type = "p", frame.plot=F,
xlab = "", ylab = "",
xaxt = "n", yaxt = "n",
xlim = c(0, 6), ylim = c(-1, 7))
abline(h = 0)
abline(v = 0)
segments(x[1], 0, x[1], y[1])
text(x, y, xyLabels, pos = 4)
x <- c(1,  5)
y <- c(5, -1)
xyLabels <- c("x1, f(x1)", "x2, f(x2)")
plot(x , y, type = "p", frame.plot=F,
xlab = "", ylab = "",
xaxt = "n", yaxt = "n",
xlim = c(0, 6), ylim = c(-1, 7))
abline(h = 0)
abline(v = 0)
segments(x[1], 0, x[1], y[1], lty = 2)
text(x, y, xyLabels, pos = 4)
x <- c(1,  5)
y <- c(5, -1)
xyLabels <- c("x1, f(x1)", "x2, f(x2)")
plot(x , y, type = "p", frame.plot=F,
xlab = "", ylab = "",
xaxt = "n", yaxt = "n",
xlim = c(0, 6), ylim = c(-1, 7))
abline(h = 0)
abline(v = 0)
segments(x[1], 0, x[1], y[1], lty = 2)
segments(x[2], 0, x[2], y[2], lty = 2)
text(x, y, xyLabels, pos = 4)
x <- c(1,  5)
y <- c(5, -2)
xyLabels <- c("x1, f(x1)", "x2, f(x2)")
plot(x , y, type = "p", frame.plot=F,
xlab = "", ylab = "",
xaxt = "n", yaxt = "n",
xlim = c(0, 6), ylim = c(-2, 7))
abline(h = 0)
abline(v = 0)
segments(x[1], 0, x[1], y[1], lty = 2)
segments(x[2], 0, x[2], y[2], lty = 2)
text(x, y, xyLabels, pos = 4)
x <- c(1,  5)
y <- c(5, -2)
xyLabels <- c("x1, f(x1)", "x2, f(x2)")
plot(x , y, type = "p", frame.plot=F, pch = 16,
xlab = "", ylab = "",
xaxt = "n", yaxt = "n",
xlim = c(0, 6), ylim = c(-2, 7))
abline(h = 0)
abline(v = 0)
segments(x[1], 0, x[1], y[1], lty = 2)
segments(x[2], 0, x[2], y[2], lty = 2)
text(x, y, xyLabels, pos = 4)
error_func <- function(x) {
x^2 - 2*x -3
}
error_func(3)
error_func(-1)
library(pracma)
install.packages("pracma")
library(pracma)
fzero(error_func, 4)
fzero(error_func, -2)
fzero(error_func, c(2, 4))
fzero(error_func, c(-2, 4))
fzero(error_func, c(2, 4))
error_func <- function(x) {
x^2 - 2*x -3
cat("x =", x, "\n")
}
fzero(error_func, c(2, 4))
error_func <- function(x) {
(x^2 - 2*x - 3)
}
fzero(error_func, c(2, 4))
error_func <- function(x) {
print(x^2 - 2*x - 3)
}
fzero(error_func, c(2, 4))
error_func <- function(x) {
return(x^2 - 2*x - 3)
}
fzero(error_func, c(2, 4))
error_func <- function(x) {
y <- x^2 - 2*x - 3
}
error_func(4)
error_func <- function(x) {
print(y <- x^2 - 2*x - 3)
}
error_func(4)
fzero(error_func, c(2, 4)
)
error_func(4)
(error_func(4))
error_func <- function(x) {
y <- x^2 - 2*x - 3
}
error_func(4)
(error_func(4))
fzero(error_func, c(2, 4))
x <- error_func(4)
(x <- error_func(4))
fzero(error_func, c(0, 1))
curve(error_func, -2, 5)
abline(h = 0, lty = 2)
sin <- 3
x <- 5
sin(x)
sin = 3
sin(1)
f <- f + 1
function() {
f <- f + 1
}
f <- function() {
f <- f + 1
}
f
f()
f <- function() {
y = x^2 - a
}
f()
f <- function() {
y = x^2 - a
}
(f())
rm(list = ls()) # clear in MATLAB
f <- function() {
y = x^2 - a
}
(f())
cheby6 <- function(x) {
32*x^6 − 48*x^4 + 18*x^2 − 1
}
cheby6 <- function(x) {
32*x^6 - 48*x^4 + 18*x^2 - 1
}
curve(cheby6, 0, 1)
abline(h = 0, lty = 2)
fzero(cheby6, c(0.2, 0.4))
fzero(cheby6, c(0.6, 0.8))
fzero(cheby6, c(0.8, 1.0))
demo()
demo(error.catching)
demo(is.things)
demo(recursion)
demo(scoping)
my.sum <- function(x) {
if(length(x) == 1) {
return(x[1])
}
if (length(x) == 2) {
return(x[1] + x[2])
}
if (length(x) == 3) {
return(x[1] + x[2] + x[3])
}
}
my.sum(c(1:3))
my.sum <- function(x) {
result <- 0
for (i in 1:length(x)) {
result <- result + x[i]
}
return(result)
}
my.sum(c(1:3))
my.sum <- function (x) {Reduce(`+`, x)}
my.sum(c(1:3))
my.prod <- function (x) {Reduce(`*`, x)}
my.prod(c(1:3))
my.factorial <- function (n) {Reduce(`*`, 1:n)}
my.factorial(3)
my.cumsum <- function (x) {Reduce(`+`, x, accumulate = TRUE)}
my.cumsum(c(1:3))
my.cumprod <- function (x) {Reduce(`*`, x, accumulate = TRUE)}
my.cumprod(c(1:3))
small.even.numbers <- Filter(function (x) {x %% 2 == 0}, 1:10)
small.even.numbers
small.odd.numbers <- Filter(function (x) {x %% 2 == 1}, 1:10)
small.odd.numbers
is.divisor <- function(a, x) {x %% a == 0}
is.divisor(3, 6)
is.prime <- function (x) {length(Filter(function (a) {is.divisor(a, x)}, 1:x)) == 2}
is.prime(3)
is.prime(6)
proper.divisors <- function (x) {Filter(function (a) {is.divisor(a, x)}, 1:(x - 1))}
proper.divisors(6)
is.perfect <- function(x) {x == Reduce(`+`, proper.divisors(x))}
is.perfect(3)
is.perfect(6)
small.perfect.numbers <- Filter(is.perfect, 1:1000)
small.perfect.numbers
Map(proper.divisors, 1:5)
Find(is.prime, 1000:2000)
Position(is.prime, 1000:2000)
is.composite <- Negate(is.prime)
is.composite(3)
is.composite(6)
cfrac <- function(x) Reduce(function(u, v) u + 1 / v, x, right = TRUE)
cfrac(c(1, rep(2, 99))) == sqrt(2)
## Continued fraction approximation for pi:
cfrac(c(3, 7, 15, 1, 292))
## Continued fraction approximation for Euler's number (e):
cfrac(c(2, 1, 2, 1, 1, 4, 1, 1, 6, 1, 1, 8))
natural.numbers <- 1:10000
iterations <- 10
mean(replicate(iterations, system.time(natural.numbers[natural.numbers %% 2 == 0])))
mean(replicate(iterations, system.time(Filter(function (n) {n %% 2 == 0}, natural.numbers))))
# Similarly, we can compare Map and lapply:
mean(replicate(iterations, system.time(lapply(1:10000, sqrt))))
mean(replicate(iterations, system.time(Map(sqrt, 1:10000))))
mean(replicate(iterations, system.time(sum(1:10000))))
mean(replicate(iterations, system.time(Reduce(`+`, 1:10000))))
library(LearnBayes)
p <- seq(0.05, 0.95, by = 0.1)
prior <- c(1, 5.2, 8, 7.2, 4.6, 2.1, 0.7, 0.1, 0, 0)
prior <- prior/sum(prior)
plot(p, prior, type = "h", ylab = "Prior Probability")
data <- c(11, 16)
post <- pdisc(p, prior, data)
round(cbind(p, prior, post), 2)
library(lattice)
PRIOR <- data.frame("prior", p, prior)
POST <- data.frame("posterior", p, post)
names(PRIOR) <- c("Type", "P", "Probability")
names(POST) <- c("Type", "P", "Probability")
data <- rbind(PRIOR, POST)
xyplot(Probability ~ P | Type, data = data, layout = c(1, 2), type = "h", lwd = 3, col = "black")
quantile2 <- list(p = 0.9, x = 0.5)
quantile1 <- list(p = 0.5, x = 0.3)
ab <- beta.select(quantile1, quantile2)
ab
a <- ab[1]
b <- ab[2]
s <- 11
f <- 16
curve(dbeta(x, a + s, b + f), from = 0, to = 1, xlab = "p", ylab = "Density", lty = 1, lwd = 4)
curve(dbeta(x, s + 1, f + 1), add = TRUE, lty = 2, lwd = 4)
curve(dbeta(x, a, b), add = TRUE, lty = 3, lwd = 4)
legend(0.7, 4, c("Prior", "Likelihood", "Posterior"), lty = c(3, 2, 1), lwd = c(3, 3, 3))
1 - pbeta(0.5, a + s, b + f)
qbeta(c(0.05, 0.95), a + s, b + f)
ps <- rbeta(1000, a + s, b + f)
hist(ps, xlab = "p", main = "")
sum(ps >= 0.5)/1000
midpt <- seq(0.05, 0.95, by = 0.1)
prior <- c(1, 5.2, 8, 7.2, 4.6, 2.1, 0.7, 0.1, 0, 0)
prior <- prior/sum(prior)
curve(histprior(x, midpt, prior), from = 0, to = 1, ylab = "Prior density", ylim = c(0, 0.3))
curve(histprior(x, midpt, prior) * dbeta(x, s + 1, f + 1), from = 0, to = 1, ylab = "Posterior density")
p <- seq(0, 1, length = 500)
post <- histprior(p, midpt, prior) * dbeta(p, s + 1, f + 1)
post <- post/sum(post)
ps <- sample(p, replace = TRUE, prob = post)
hist(ps, xlab = "p", main = "")
p <- seq(0.05, 0.95, by = 0.1)
prior <- c(1, 5.2, 8, 7.2, 4.6, 2.1, 0.7, 0.1, 0, 0)
prior <- prior/sum(prior)
m <- 20
ys <- 0:20
pred <- pdiscp(p, prior, m, ys)
round(cbind(0:20, pred), 3)
ab <- c(3.26, 7.19)
m <- 20
ys <- 0:20
pred <- pbetap(ab, m, ys)
p <- rbeta(1000, 3.26, 7.19)
y <- rbinom(1000, 20, p)
table(y)
freq <- table(y)
ys <- as.integer(names(freq))
predprob <- freq/sum(freq)
plot(ys, predprob, type = "h", xlab = "y", ylab = "Predictive Probability")
dist <- cbind(ys, predprob)
dist
covprob <- 0.9
discint(dist, covprob)
quantile(ps, c(0.05, 0.95))
install.packages("rmarkdown")
ASDAR_BOOK <- "http://www.asdar-book.org/book2ed"
chapters <- c("hello", "cm", "vis", "die", "cm2", "std", "sppa", "geos", "lat", "dismap")
setwd("~/GitHub/GIS") # move to download folder
for (i in chapters) {
fn <- paste(i, "mod.R", sep = "_")
download.file(paste(ASDAR_BOOK, fn, sep = "/"), fn)
}
list.files()
